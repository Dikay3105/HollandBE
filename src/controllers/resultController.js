// src/controllers/resultController.js
const Major = require('../models/Major');
const Student = require('../models/Student');

exports.submitResults = async (req, res) => {
    try {
        const { personalInfo, selectedBlocks, hollandScores, scores } = req.body;
        const { name, class: studentClass, number } = personalInfo;

        // 1Ô∏è‚É£ S·∫Øp x·∫øp nh√≥m theo ƒëi·ªÉm gi·∫£m d·∫ßn
        const sorted = Object.entries(hollandScores || {})
            .map(([k, v]) => [k.toUpperCase(), Number(v)])
            .sort((a, b) => b[1] - a[1]);

        // 2Ô∏è‚É£ Gom c√°c nh√≥m c√≥ c√πng ƒëi·ªÉm th√†nh t·ª´ng "bucket"
        const groupsByScore = [];
        for (let i = 0; i < sorted.length;) {
            const score = sorted[i][1];
            const types = [];
            while (i < sorted.length && sorted[i][1] === score) {
                types.push(sorted[i][0]);
                i++;
            }
            groupsByScore.push({ score, types });
        }

        // 3Ô∏è‚É£ X√°c ƒë·ªãnh topGroups
        // Quy t·∫Øc:
        //  - N·∫øu bucket cao nh·∫•t c√≥ >=4 nh√≥m (ho·∫∑c c·∫£ 6 nh√≥m b·∫±ng nhau) => r·ªóng
        //  - Ng∆∞·ª£c l·∫°i, duy·ªát l·∫ßn l∆∞·ª£t c√°c bucket; ch·ªâ th√™m nguy√™n c·∫£ bucket
        //    n·∫øu t·ªïng s·ªë nh√≥m sau khi th√™m ‚â§ 3. Kh√¥ng th√™m m·ªôt ph·∫ßn bucket.
        let topGroups = [];
        if (groupsByScore.length > 0) {
            const maxBucket = groupsByScore[0];
            if (maxBucket.types.length >= 4 || (groupsByScore.length === 1 && maxBucket.types.length === 6)) {
                topGroups = [];
            } else {
                const included = [];
                for (let bi = 0; bi < groupsByScore.length && included.length < 3; bi++) {
                    const bucket = groupsByScore[bi];
                    if (included.length + bucket.types.length <= 3) {
                        bucket.types.forEach(t => included.push({ type: t, score: bucket.score }));
                    } else {
                        // n·∫øu th√™m c·∫£ bucket s·∫Ω v∆∞·ª£t qu√° 3 nh√≥m -> b·ªè nguy√™n bucket
                    }
                }
                topGroups = included;
            }
        }

        // 4Ô∏è‚É£ T√¨m ng√†nh ph√π h·ª£p: kh·ªëi thi h·ª£p l·ªá + c√≥ √≠t nh·∫•t 1 nh√≥m trong topGroups
        const majors = topGroups.length > 0
            ? await Major.find({
                examBlocks: { $in: selectedBlocks || [] },
                hollandGroups: { $in: topGroups.map(t => t.type) }
            }).lean()
            : [];

        // 5Ô∏è‚É£ Lo·∫°i b·ªè ng√†nh tr√πng
        const uniqueMajors = [];
        const seen = new Set();
        for (const m of majors) {
            if (!seen.has(m._id.toString())) {
                seen.add(m._id.toString());
                uniqueMajors.push(m);
            }
        }

        // 6Ô∏è‚É£ Th√¥ng ƒëi·ªáp g·ª£i √Ω
        let recommendationText = uniqueMajors.length
            ? `Ng√†nh ngh·ªÅ b·∫°n c√≥ th·ªÉ l·ª±a ch·ªçn: ${uniqueMajors.map(m => m.name).join(', ')}.`
            : 'Hi·ªán ch∆∞a c√≥ ng√†nh n√†o ph√π h·ª£p v·ªõi nh√≥m Holland v√† kh·ªëi thi b·∫°n ch·ªçn.';
        if (topGroups.length === 0) {
            recommendationText =
                'B·∫°n kh√¥ng thi√™n h·∫≥n v·ªÅ nh√≥m Holland n√†o, h√£y l√†m l·∫°i test ho·∫∑c tham kh·∫£o √Ω ki·∫øn gi√°o vi√™n.';
        }

        // 7Ô∏è‚É£ L∆∞u ho·∫∑c c·∫≠p nh·∫≠t Student
        const updatedStudent = await Student.findOneAndUpdate(
            { name, class: studentClass, number },
            {
                $set: {
                    selectedBlocks,
                    hollandScores,
                    scores,
                    recommendedMajors: uniqueMajors,
                    createdAt: new Date()
                }
            },
            { new: true, upsert: true }
        );

        // 8Ô∏è‚É£ Tr·∫£ v·ªÅ k·∫øt qu·∫£
        return res.json({
            success: true,
            message: 'K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω',
            topGroups,                    // üëâ ch·ªâ tr·∫£ m·∫£ng {type, score} nh∆∞ y√™u c·∫ßu
            recommendedMajors: uniqueMajors,
            recommendationText,
            student: updatedStudent
        });
    } catch (err) {
        console.error(err);
        return res.status(500).json({ success: false, message: 'Server error' });
    }
};
